@page "/"

@using BlazorWebApp.DTOs.Film
@using BlazorWebApp.DTOs.ShoppingCartMovieDTO
@using BlazorWebApp.Interfaces
@using BlazorWebApp.Services
@using BlazorWebApp.Util
@using System
@using System.Security.Claims
@inject IDialogService dialogService
@inject IShoppingCartMovieService shoppingCartMovieService
@inject IFilmService filmService
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize(Roles = "DEFAULT, ADMIN")]

<head>
    <link rel="stylesheet" href="/css/pages/index.css" />
</head>
<body>
    @if(filmes == null || !string.IsNullOrEmpty(msgErro))
    {
        <p>@msgErro</p>
    }
    else
    {
        <div class="container text-center">
            <div class="row row-cols-1 row-cols-md-4 row-cols-sm-2">
                @foreach (var filme in filmes)
                {
                    <div class="grid-container">
                        <div class="grid-item">
                            <div class="card">
                                <div class="img-container">
                                    <img src="@($"data:image/png;base64,{filme.Image}")" class="card-img-top" />
                                </div>


                                <div class="card-content">
                                    <h5 class="card-title">@filme.Name</h5>
                                    <p class="card-text">@filme.Description</p>
                                    <p class="card-text" style="border-top: 0.1rem solid black; padding-top: 0.5rem;">$ @(filme.Price.ToString("F2"))</p>
                                </div>
                            </div>
                            <button @onclick="() => Comprar(filme)" class="btn btn-primary buy-button-item mt-2" style="max-width: 30rem;">Buy</button>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="row ml-12">
            <div class="col">
                <nav aria-label="Page navigation example">
                    <ul class="pagination" style="cursor: pointer;">
                        <li class="page-item">
                            <a class="page-link next-back-page" @onclick="() => PreviousPage()" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                        <li class="page-item"><a class="page-link" @onclick="() => ProxPagina(1)">1</a></li>
                        <li class="page-item"><a class="page-link" @onclick="() => ProxPagina(2)">2</a></li>
                        <li class=" page-item"><a class="page-link" @onclick="() => ProxPagina(3)">3</a></li>
                        <li class="page-item">
                            <a class="page-link next-back-page" @onclick="() => ProxPagina()" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    }

</body>

@code {
    private List<FoundFilmDto> filmes = new List<FoundFilmDto>();
    private List<string> imagemSrc = new List<string>();
    int page = 1;
    string msgErro = string.Empty;
    Guid shoppingCartId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                Guid.TryParse(user.FindFirst(ClaimTypes.UserData)?.Value, out shoppingCartId);
            }

            var result = await filmService.GetAllPaginated(page);

            if (!result.Success)
                throw new Exception(result.Message);

            filmes = result.ResultObj;

            if (filmes.Count == 0)
                throw new Exception("Nenhum filme encontrado!");

            // ChangeValues(filmes);
        }
        catch(Exception ex)
        {
            msgErro = ex.Message;
        }
        StateHasChanged(); 
    }

    private void ChangeValues(List<FoundFilmDto> films)
    {
        this.filmes = films;
        this.imagemSrc = new List<string>();

        foreach (var filme in this.filmes)
        {
            if (filme.Image.Length > 0)
            {
                this.imagemSrc.Add($"data:image/jpeg;base64,{filme.Image}");
            }
        }
    }

    private async void Comprar(FoundFilmDto film)
    {

        var shoppingCartMovieDto = new CreateShoppingCartMovieDto
        {
            Amount = 1,
            ShoppingCartId = shoppingCartId,
            FilmId = film.Id,
        };

        await shoppingCartMovieService.CreateAsync(shoppingCartMovieDto);
    }

    private async Task ProxPagina(int? pageNumber = null)
    {
        try
        {
            if (pageNumber == null)
            {
                page++;
            }
            else
            {
                page = (int)pageNumber;
            }

            var result = await filmService.GetAllPaginated(page);

            if (!result.Success)
            {
                throw new Exception(result.Message);
            }

            if (result.ResultObj.Count == 0)
            {
                page--;
                throw new Exception("Não há mais registros.");
            }

            filmes = result.ResultObj;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await dialogService.ShowMessageBox("ERRO", ex.Message);
        }
    }

    private async Task PreviousPage()
    {
        try
        {

            if (page == 0)
                throw new Exception("Não é possível voltar mais.");

            page--;

            var result = await filmService.GetAllPaginated(page);

            if (!result.Success)
                throw new Exception(result.Message);

            filmes = result.ResultObj;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await dialogService.ShowMessageBox("ERRO", ex.Message);
        }
    }

}
